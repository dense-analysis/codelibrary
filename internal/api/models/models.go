package models

import (
	"time"

	"github.com/google/uuid"
)

// ErrorLocation is an error location for API responses
// The structure matches data typically generated by Python apps.
type ErrorLocation struct {
	Type string   `json:"type"`
	Msg  string   `json:"msg"`
	Loc  []string `json:"loc"`
} //@name ErrorLocation

// Error is an error for API responses
// The structure matches data typically generated by Python apps.
type Error struct {
	Detail []ErrorLocation `json:"detail"`
} //@name Error

// NewErrorLocation creates a new error location object to return in a response.
func NewErrorLocation(_type string, msg string, loc ...string) ErrorLocation {
	return ErrorLocation{Type: _type, Msg: msg, Loc: loc}
}

// NewError creates a new object to return in response.
func NewError(detail ...ErrorLocation) Error {
	return Error{Detail: detail}
}

// NewBodyError creates a general error about the request body.
func NewBodyError(_type string, msg string) Error {
	return NewError(NewErrorLocation(_type, msg, "body"))
}

// Page represents any page of results.
type Page[T any] struct {
	Results []T    `json:"results"`
	Count   uint64 `json:"count" example:"1"`
}

type Language struct {
	ID   string `json:"id"`
	Name string `json:"name"`
} //@name Language

type User struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
} //@name User

type RegisterUser struct {
	Username        string `json:"username"`
	Password        string `json:"password" example:"password"`
	ConfirmPassword string `json:"confirmPassword" example:"password"`
} //@name RegisterUser

type CodeSampleSearch struct {
	Query     string   `query:"q"`
	Languages []string `query:"languages"`
	Page      uint64   `query:"page"`
	PageSize  uint64   `query:"pageSize"`
} // @name CodeSampleSearch

type CodeSample struct {
	ID          uuid.UUID `json:"id"`
	SubmittedBy User      `json:"submittedBy"`
	Language    Language  `json:"language"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Body        string    `json:"body"`
	Created     time.Time `json:"created"`
	Modified    time.Time `json:"modified"`
} //@name CodeSample

type CodeSamplePage = Page[CodeSample] // @name CodeSamplePage

type CodeSampleSubmission struct {
	LanguageID  string `json:"languageId"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Body        string `json:"body"`
} //@name CodeSampleSubmission
